version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: winget-repo-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - winget-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: winget-repo-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - winget-network

  # MinIO bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: winget-repo-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set myminio http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY};
      /usr/bin/mc mb myminio/${S3_BUCKET} --ignore-existing;
      /usr/bin/mc anonymous set download myminio/${S3_BUCKET};
      echo 'Bucket ${S3_BUCKET} created and configured';
      "
    networks:
      - winget-network

  # FastAPI Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: winget-repo-backend
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ../backend:/app
    command: >
      sh -c "
      echo 'Waiting for database...';
      sleep 10;
      echo 'Running database migrations...';
      alembic upgrade head;
      echo 'Starting backend server...';
      gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --timeout 300 --log-level info
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - winget-network

  # Frontend Build
  frontend-builder:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: winget-repo-frontend-builder
    volumes:
      - frontend_dist:/app/dist
    command: sh -c "npm ci && npm run build && cp -r dist/* /app/dist/"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: winget-repo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - frontend_dist:/usr/share/nginx/html:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend-builder:
        condition: service_completed_successfully
    networks:
      - winget-network

  # Updater Service
  updater:
    build:
      context: ../updater
      dockerfile: Dockerfile
    container_name: winget-repo-updater
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ../updater/allow-list.json:/app/allow-list.json:ro
    networks:
      - winget-network

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  frontend_dist:
    driver: local

networks:
  winget-network:
    driver: bridge
