import { useState, useEffect } from 'react'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import api from '../lib/api'

export default function UploadPage() {
  const queryClient = useQueryClient()
  const [uploadMethod, setUploadMethod] = useState<'file' | 'url'>('file')
  const [isExtractingMetadata, setIsExtractingMetadata] = useState(false)
  const [metadataExtracted, setMetadataExtracted] = useState(false)

  // Form data - all auto-filled from metadata
  const [packageId, setPackageId] = useState('')
  const [packageName, setPackageName] = useState('')
  const [publisher, setPublisher] = useState('')
  const [version, setVersion] = useState('')
  const [description, setDescription] = useState('')

  // File/URL
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [sourceUrl, setSourceUrl] = useState('')

  // Optional fields
  const [architecture, setArchitecture] = useState('x64')
  const [installerType, setInstallerType] = useState('exe')

  // Auto-extract metadata when file is selected
  useEffect(() => {
    if (selectedFile && uploadMethod === 'file') {
      extractMetadataFromFile(selectedFile)
    }
  }, [selectedFile])

  // Extract metadata from file
  const extractMetadataFromFile = async (file: File) => {
    setIsExtractingMetadata(true)
    setMetadataExtracted(false)
    try {
      const formData = new FormData()
      formData.append('file', file)

      const response = await api.post('/admin/extract-metadata', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      })

      const metadata = response.data

      // Auto-fill form fields with metadata
      if (metadata.product_name) {
        setPackageName(metadata.product_name)
      }
      if (metadata.publisher) {
        setPublisher(metadata.publisher)
      }
      if (metadata.version) {
        setVersion(metadata.version)
      }
      if (metadata.description) {
        setDescription(metadata.description)
      }

      // Auto-generate package ID
      if (metadata.publisher && metadata.product_name) {
        const id = `${metadata.publisher.replace(/[^a-zA-Z0-9]/g, '')}.${metadata.product_name.replace(/[^a-zA-Z0-9]/g, '')}`
        setPackageId(id)
      }

      setMetadataExtracted(true)
    } catch (error: any) {
      console.error('Failed to extract metadata:', error)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏.')
    } finally {
      setIsExtractingMetadata(false)
    }
  }

  // Extract metadata from URL
  const extractMetadataFromUrl = async () => {
    if (!sourceUrl) return

    setIsExtractingMetadata(true)
    setMetadataExtracted(false)
    try {
      const response = await api.post('/admin/extract-metadata-from-url', {
        url: sourceUrl,
      })

      const metadata = response.data

      // Auto-fill form fields with metadata
      if (metadata.product_name) {
        setPackageName(metadata.product_name)
      }
      if (metadata.publisher) {
        setPublisher(metadata.publisher)
      }
      if (metadata.version) {
        setVersion(metadata.version)
      }
      if (metadata.description) {
        setDescription(metadata.description)
      }

      // Auto-generate package ID
      if (metadata.publisher && metadata.product_name) {
        const id = `${metadata.publisher.replace(/[^a-zA-Z0-9]/g, '')}.${metadata.product_name.replace(/[^a-zA-Z0-9]/g, '')}`
        setPackageId(id)
      }

      setMetadataExtracted(true)
      alert('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã!')
    } catch (error) {
      console.error('Failed to extract metadata:', error)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ URL')
    } finally {
      setIsExtractingMetadata(false)
    }
  }

  const uploadMutation = useMutation({
    mutationFn: async () => {
      // Verify we have metadata
      if (!metadataExtracted || !packageId || !packageName || !publisher || !version) {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö')
      }

      // Create package
      const pkgResponse = await api.post('/admin/packages', {
        identifier: packageId,
        name: packageName,
        publisher: publisher,
        description: description || undefined,
      })

      const packageDbId = pkgResponse.data.id

      // Create version
      const verResponse = await api.post('/admin/versions', {
        package_id: packageDbId,
        version: version,
      })

      const versionId = verResponse.data.id

      // Upload installer
      if (uploadMethod === 'file' && selectedFile) {
        const formData = new FormData()
        formData.append('file', selectedFile)

        await api.post(
          `/admin/upload?version_id=${versionId}&architecture=${architecture}&installer_type=${installerType}`,
          formData,
          { headers: { 'Content-Type': 'multipart/form-data' } }
        )
      } else if (uploadMethod === 'url' && sourceUrl) {
        await api.post('/admin/upload-from-url', {
          version_id: versionId,
          source_url: sourceUrl,
          architecture: architecture,
          installer_type: installerType,
        })
      }

      return { packageDbId }
    },
    onSuccess: () => {
      alert('–ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –•—ç—à —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.')
      // Reset form
      setPackageId('')
      setPackageName('')
      setPublisher('')
      setVersion('')
      setDescription('')
      setSelectedFile(null)
      setSourceUrl('')
      setMetadataExtracted(false)
      queryClient.invalidateQueries({ queryKey: ['packages'] })
    },
    onError: (error: any) => {
      const detail = error?.response?.data?.detail || error?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
      alert(`–û—à–∏–±–∫–∞: ${detail}`)
    },
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!metadataExtracted) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞')
      return
    }

    if (!packageId || !packageName || !publisher || !version) {
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.')
      return
    }

    if (uploadMethod === 'file' && !selectedFile) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª')
      return
    }

    if (uploadMethod === 'url' && !sourceUrl) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL')
      return
    }

    uploadMutation.mutate()
  }

  return (
    <div className="max-w-3xl mx-auto space-y-6">
      <div>
        <h1 className="text-3xl font-bold">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–∫–µ—Ç–∞</h1>
        <p className="text-muted-foreground mt-2">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª (EXE –∏–ª–∏ MSI). –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.
          –•—ç—à SHA256 –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.
        </p>
      </div>

      {isExtractingMetadata && (
        <div className="rounded-lg border bg-blue-50 dark:bg-blue-950 p-4">
          <p className="text-sm text-blue-900 dark:text-blue-100">
            üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à...
          </p>
        </div>
      )}

      {metadataExtracted && (
        <div className="rounded-lg border bg-green-50 dark:bg-green-950 p-4">
          <p className="text-sm text-green-900 dark:text-green-100">
            ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã! –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ.
          </p>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Upload Method */}
        <div className="rounded-lg border bg-card p-6 space-y-4">
          <h2 className="text-xl font-semibold">1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª</h2>

          <div className="flex gap-2 mb-4">
            <button
              type="button"
              onClick={() => {
                setUploadMethod('file')
                setMetadataExtracted(false)
              }}
              className={`px-4 py-2 rounded-md ${
                uploadMethod === 'file' ? 'bg-primary text-primary-foreground' : 'bg-muted'
              }`}
            >
              –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
            </button>
            <button
              type="button"
              onClick={() => {
                setUploadMethod('url')
                setMetadataExtracted(false)
              }}
              className={`px-4 py-2 rounded-md ${
                uploadMethod === 'url' ? 'bg-primary text-primary-foreground' : 'bg-muted'
              }`}
            >
              –ò–∑ URL
            </button>
          </div>

          {uploadMethod === 'file' ? (
            <div>
              <label className="block text-sm font-medium mb-1">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (EXE –∏–ª–∏ MSI) *</label>
              <input
                type="file"
                onChange={(e) => setSelectedFile(e.target.files?.[0] || null)}
                className="w-full rounded-md border bg-background px-3 py-2"
                accept=".exe,.msi,.msix"
              />
              {selectedFile && (
                <p className="mt-1 text-sm text-muted-foreground">
                  {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} –ú–ë)
                </p>
              )}
              <p className="mt-2 text-xs text-muted-foreground">
                –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∏–∑–¥–∞—Ç–µ–ª—å, –≤–µ—Ä—Å–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ.
                –¢–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è SHA256 —Ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.
              </p>
            </div>
          ) : (
            <div>
              <label className="block text-sm font-medium mb-1">URL —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ *</label>
              <div className="flex gap-2">
                <input
                  type="url"
                  value={sourceUrl}
                  onChange={(e) => setSourceUrl(e.target.value)}
                  placeholder="https://example.com/installer.exe"
                  className="flex-1 rounded-md border bg-background px-3 py-2"
                />
                <button
                  type="button"
                  onClick={extractMetadataFromUrl}
                  disabled={!sourceUrl || isExtractingMetadata}
                  className="px-4 py-2 rounded-md bg-secondary hover:bg-secondary/80 disabled:opacity-50"
                >
                  {isExtractingMetadata ? '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ...' : '–ò–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ'}
                </button>
              </div>
              <p className="mt-2 text-xs text-muted-foreground">
                –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ URL
              </p>
            </div>
          )}

          <div className="grid gap-4 md:grid-cols-2">
            <div>
              <label className="block text-sm font-medium mb-1">–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</label>
              <select
                value={architecture}
                onChange={(e) => setArchitecture(e.target.value)}
                className="w-full rounded-md border bg-background px-3 py-2"
              >
                <option value="x64">x64 (64-bit)</option>
                <option value="x86">x86 (32-bit)</option>
                <option value="arm">ARM</option>
                <option value="arm64">ARM64</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">–¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞</label>
              <select
                value={installerType}
                onChange={(e) => setInstallerType(e.target.value)}
                className="w-full rounded-md border bg-background px-3 py-2"
              >
                <option value="exe">EXE</option>
                <option value="msi">MSI</option>
                <option value="msix">MSIX</option>
                <option value="inno">Inno Setup</option>
                <option value="nullsoft">NSIS</option>
                <option value="portable">Portable</option>
              </select>
            </div>
          </div>
        </div>

        {/* Package Information - Auto-filled, read-only */}
        {metadataExtracted && (
          <div className="rounded-lg border bg-card p-6 space-y-4">
            <h2 className="text-xl font-semibold">2. –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ</h2>
            <p className="text-sm text-muted-foreground">
              –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Ö –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
            </p>

            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <label className="block text-sm font-medium mb-1">ID –ø–∞–∫–µ—Ç–∞</label>
                <input
                  type="text"
                  value={packageId}
                  onChange={(e) => setPackageId(e.target.value)}
                  className="w-full rounded-md border bg-background px-3 py-2"
                />
                <p className="mt-1 text-xs text-muted-foreground">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω</p>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞</label>
                <input
                  type="text"
                  value={packageName}
                  onChange={(e) => setPackageName(e.target.value)}
                  className="w-full rounded-md border bg-background px-3 py-2"
                />
                <p className="mt-1 text-xs text-muted-foreground">–ò–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞</p>
              </div>
            </div>

            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <label className="block text-sm font-medium mb-1">–ò–∑–¥–∞—Ç–µ–ª—å</label>
                <input
                  type="text"
                  value={publisher}
                  onChange={(e) => setPublisher(e.target.value)}
                  className="w-full rounded-md border bg-background px-3 py-2"
                />
                <p className="mt-1 text-xs text-muted-foreground">–ò–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞</p>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">–í–µ—Ä—Å–∏—è</label>
                <input
                  type="text"
                  value={version}
                  onChange={(e) => setVersion(e.target.value)}
                  className="w-full rounded-md border bg-background px-3 py-2"
                />
                <p className="mt-1 text-xs text-muted-foreground">–ò–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞</p>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞"
                className="w-full rounded-md border bg-background px-3 py-2"
                rows={2}
              />
              <p className="mt-1 text-xs text-muted-foreground">–ò–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞</p>
            </div>
          </div>
        )}

        {/* Submit */}
        <button
          type="submit"
          disabled={uploadMutation.isPending || isExtractingMetadata || !metadataExtracted}
          className="w-full rounded-md bg-primary px-6 py-3 text-primary-foreground font-medium hover:bg-primary/90 disabled:opacity-50"
        >
          {uploadMutation.isPending ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : !metadataExtracted ? '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–∫–µ—Ç'}
        </button>
      </form>

      {/* Help Text */}
      <div className="rounded-lg border bg-muted/50 p-4">
        <h3 className="font-semibold mb-2">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</h3>
        <ul className="text-sm text-muted-foreground space-y-1">
          <li>‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ EXE/MSI —Ñ–∞–π–ª–æ–≤</li>
          <li>‚úÖ SHA256 —Ö—ç—à –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞</li>
          <li>‚úÖ ID –ø–∞–∫–µ—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∏–∑–¥–∞—Ç–µ–ª—è</li>
          <li>‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π</li>
          <li>‚Ä¢ –î–ª—è –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ WinGet –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Allow List</li>
        </ul>
      </div>
    </div>
  )
}
